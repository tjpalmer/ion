// #define MIN(x, y) ((x) <= (y) ? (x) : (y))
func min(x: int, y: int): int {
    return x <= y ? x : y;
}

// #define MAX(x, y) ((x) >= (y) ? (x) : (y))
func max(x: int, y: int): int {
    return x >= y ? x : y;
}

// #define CLAMP_MAX(x, max) MIN(x, max)
func clamp_max(x: int, max: int): int {
    return min(x, max);
}

// #define CLAMP_MIN(x, min) MAX(x, min)
// #define IS_POW2(x) (((x) != 0) && ((x) & ((x)-1)) == 0)
// #define ALIGN_DOWN(n, a) ((n) & ~((a) - 1))
// #define ALIGN_UP(n, a) ALIGN_DOWN((n) + (a) - 1, (a))
// #define ALIGN_DOWN_PTR(p, a) ((void *)ALIGN_DOWN((uintptr_t)(p), (a)))
// #define ALIGN_UP_PTR(p, a) ((void *)ALIGN_UP((uintptr_t)(p), (a)))

// func fatal(fmt: char const*, ...) {
//     va_list args;
//     va_start(args, fmt);
//     printf("FATAL: ");
//     vprintf(fmt, args);
//     printf("\n");
//     va_end(args);
//     exit(1);
// }

// func *xcalloc(size_t num_elems, size_t elem_size) {
//     void *ptr = calloc(num_elems, elem_size);
//     if (!ptr) {
//         perror("xcalloc failed");
//         exit(1);
//     }
//     return ptr;
// }

// func *xrealloc(void *ptr, size_t num_bytes) {
//     ptr = realloc(ptr, num_bytes);
//     if (!ptr) {
//         perror("xrealloc failed");
//         exit(1);
//     }
//     return ptr;
// }

// func *xmalloc(size_t num_bytes) {
//     void *ptr = malloc(num_bytes);
//     if (!ptr) {
//         perror("xmalloc failed");
//         exit(1);
//     }
//     return ptr;
// }

// func *memdup(void *src, size_t size) {
//     void *dest = xmalloc(size);
//     memcpy(dest, src, size);
//     return dest;
// }

// char *strf(fmt: char const*, ...) {
//     va_list args;
//     va_start(args, fmt);
//     size_t n = 1 + vsnprintf(NULL, 0, fmt, args);
//     va_end(args);
//     str: char* = xmalloc(n);
//     va_start(args, fmt);
//     vsnprintf(str, n, fmt, args);
//     va_end(args);
//     return str;
// }

// char *read_file(path: char const*) {
//     FILE *file = fopen(path, "rb");
//     if (!file) {
//         return NULL;
//     }
//     fseek(file, 0, SEEK_END);
//     long len = ftell(file);
//     fseek(file, 0, SEEK_SET);
//     buf: char* = xmalloc(len + 1);
//     if (len && fread(buf, len, 1, file) != 1) {
//         fclose(file);
//         free(buf);
//         return NULL;
//     }
//     fclose(file);   
//     buf[len] = 0;
//     return buf;
// }

func write_file(path: char const*, buf: char const*, len: usize): bool {
    // FILE *file = fopen(path, "w");
    // if (!file) {
    //     return false;
    // }
    // size_t n = fwrite(buf, len, 1, file);
    // fclose(file);
    // return n == 1;
    return false;
}

// Stretchy buffers, invented (?) by Sean Barrett

// typedef struct BufHdr {
//     size_t len;
//     size_t cap;
//     char buf[];
// } BufHdr;

// #define buf__hdr(b) ((BufHdr *)((char *)(b) - offsetof(BufHdr, buf)))

// #define buf_len(b) ((b) ? buf__hdr(b)->len : 0)
func buf_len(b: void*): usize {
    return 0;
}

// #define buf_cap(b) ((b) ? buf__hdr(b)->cap : 0)
// #define buf_end(b) ((b) + buf_len(b))
// #define buf_sizeof(b) ((b) ? buf_len(b)*sizeof(*b) : 0)

// #define buf_free(b) ((b) ? (free(buf__hdr(b)), (b) = NULL) : 0)
// #define buf_fit(b, n) ((n) <= buf_cap(b) ? 0 : ((b) = buf__grow((b), (n), sizeof(*(b)))))

// TODO: We need templates or macros to make this better generic.
// #define buf_push(b, ...) (buf_fit((b), 1 + buf_len(b)), (b)[buf__hdr(b)->len++] = (__VA_ARGS__))
func buf_push(b: void*, item: void*, size: usize) {
    //
}

// #define buf_printf(b, ...) ((b) = buf__printf((b), __VA_ARGS__))
// #define buf_clear(b) ((b) ? buf__hdr(b)->len = 0 : 0)

// func *buf__grow(const void *buf, size_t new_len, size_t elem_size) {
//     assert(buf_cap(buf) <= (SIZE_MAX - 1)/2);
//     size_t new_cap = CLAMP_MIN(2*buf_cap(buf), MAX(new_len, 16));
//     assert(new_len <= new_cap);
//     assert(new_cap <= (SIZE_MAX - offsetof(BufHdr, buf))/elem_size);
//     size_t new_size = offsetof(BufHdr, buf) + new_cap*elem_size;
//     BufHdr *new_hdr;
//     if (buf) {
//         new_hdr = xrealloc(buf__hdr(buf), new_size);
//     } else {
//         new_hdr = xmalloc(new_size);
//         new_hdr->len = 0;
//     }
//     new_hdr->cap = new_cap;
//     return new_hdr->buf;
// }

// char *buf__printf(char *buf, fmt: char const*, ...) {
//     va_list args;
//     va_start(args, fmt);
//     size_t cap = buf_cap(buf) - buf_len(buf);
//     size_t n = 1 + vsnprintf(buf_end(buf), cap, fmt, args);
//     va_end(args);
//     if (n > cap) {
//         buf_fit(buf, n + buf_len(buf));
//         va_start(args, fmt);
//         size_t new_cap = buf_cap(buf) - buf_len(buf);
//         n = 1 + vsnprintf(buf_end(buf), new_cap, fmt, args);
//         assert(n <= new_cap);
//         va_end(args);
//     }
//     buf__hdr(buf)->len += n - 1;
//     return buf;
// }

// func buf_test() {
//     buf: int* = NULL;
//     assert(buf_len(buf) == 0);
//     int n = 1024;
//     for (int i = 0; i < n; i++) {
//         buf_push(buf, i);
//     }
//     assert(buf_len(buf) == n);
//     for (size_t i = 0; i < buf_len(buf); i++) {
//         assert(buf[i] == i);
//     }
//     buf_free(buf);
//     assert(buf == NULL);
//     assert(buf_len(buf) == 0);
//     str: char* = NULL;
//     buf_printf(str, "One: %d\n", 1);
//     assert(strcmp(str, "One: 1\n") == 0);
//     buf_printf(str, "Hex: 0x%x\n", 0x12345678);
//     assert(strcmp(str, "One: 1\nHex: 0x12345678\n") == 0);
// }

var allocator: Arena;

struct Arena {
    ptr: char*;
    end: char*;
    blocks: char**;
}

// #define ARENA_ALIGNMENT 8
// #define ARENA_BLOCK_SIZE (1024 * 1024)
// // #define ARENA_BLOCK_SIZE 1024

// func arena_grow(Arena *arena, size_t min_size) {
//     size_t size = ALIGN_UP(CLAMP_MIN(min_size, ARENA_BLOCK_SIZE), ARENA_ALIGNMENT);
//     arena->ptr = xmalloc(size);
//     assert(arena->ptr == ALIGN_DOWN_PTR(arena->ptr, ARENA_ALIGNMENT));
//     arena->end = arena->ptr + size;
//     buf_push(arena->blocks, arena->ptr);
// }

// func *arena_alloc(Arena *arena, size_t size) {
//     if (size > (size_t)(arena->end - arena->ptr)) {
//         arena_grow(arena, size);
//         assert(size <= (size_t)(arena->end - arena->ptr));
//     }
//     void *ptr = arena->ptr;
//     arena->ptr = ALIGN_UP_PTR(arena->ptr + size, ARENA_ALIGNMENT);
//     assert(arena->ptr <= arena->end);
//     assert(ptr == ALIGN_DOWN_PTR(ptr, ARENA_ALIGNMENT));
//     return ptr;
// }

// func arena_free(Arena *arena) {
//     for (it: char** = arena->blocks; it != buf_end(arena->blocks); it++) {
//         free(*it);
//     }
//     buf_free(arena->blocks);
// }

// Hash map

// uint64_t hash_uint64(uint64_t x) {
//     x *= 0xff51afd7ed558ccd;
//     x ^= x >> 32;
//     return x;
// }

// uint64_t hash_ptr(const void *ptr) {
//     return hash_uint64((uintptr_t)ptr);
// }

// uint64_t hash_mix(uint64_t x, uint64_t y) {
//     x ^= y;
//     x *= 0xff51afd7ed558ccd;
//     x ^= x >> 32;
//     return x;
// }

// uint64_t hash_bytes(const void *ptr, size_t len) {
//     uint64_t x = 0xcbf29ce484222325;
//     buf: char const* = (const char *)ptr;
//     for (size_t i = 0; i < len; i++) {
//         x ^= buf[i];
//         x *= 0x100000001b3;
//         x ^= x >> 32;
//     }
//     return x;
// }

struct Map {
    keys: uint64*;
    vals: uint64*;
    len: usize;
    cap: usize;
}

// uint64_t map_get_uint64_from_uint64(Map *map, uint64_t key) {
//     if (map->len == 0) {
//         return 0;
//     }
//     assert(IS_POW2(map->cap));
//     size_t i = (size_t)hash_uint64(key);
//     assert(map->len < map->cap);
//     for (;;) {
//         i &= map->cap - 1;
//         if (map->keys[i] == key) {
//             return map->vals[i];
//         } else if (!map->keys[i]) {
//             return 0;
//         }
//         i++;
//     }
//     return 0;
// }

// func map_put_uint64_from_uint64(Map *map, uint64_t key, uint64_t val);

// func map_grow(Map *map, size_t new_cap) {
//     new_cap = CLAMP_MIN(new_cap, 16);
//     Map new_map = {
//         .keys = xcalloc(new_cap, sizeof(uint64_t)),
//         .vals = xmalloc(new_cap * sizeof(uint64_t)),
//         .cap = new_cap,
//     };
//     for (size_t i = 0; i < map->cap; i++) {
//         if (map->keys[i]) {
//             map_put_uint64_from_uint64(&new_map, map->keys[i], map->vals[i]);
//         }
//     }
//     free((void *)map->keys);
//     free(map->vals);
//     *map = new_map;
// }

// func map_put_uint64_from_uint64(Map *map, uint64_t key, uint64_t val) {
//     assert(key);
//     if (!val) {
//         return;
//     }
//     if (2*map->len >= map->cap) {
//         map_grow(map, 2*map->cap);
//     }
//     assert(2*map->len < map->cap);
//     assert(IS_POW2(map->cap));
//     size_t i = (size_t)hash_uint64(key);
//     for (;;) {
//         i &= map->cap - 1;
//         if (!map->keys[i]) {
//             map->len++;
//             map->keys[i] = key;
//             map->vals[i] = val;
//             return;
//         } else if (map->keys[i] == key) {
//             map->vals[i] = val;
//             return;
//         }
//         i++;
//     }
// }

// func *map_get(Map *map, const void *key) {
//     return (void *)(uintptr_t)map_get_uint64_from_uint64(map, (uint64_t)(uintptr_t)key);
// }

func map_put(map: Map*, key: void const*, val: void*) {
    // map_put_uint64_from_uint64(map, (uint64_t)(uintptr_t)key, (uint64_t)(uintptr_t)val);
}

// func *map_get_from_uint64(Map *map, uint64_t key) {
//     return (void *)(uintptr_t)map_get_uint64_from_uint64(map, key);
// }

// func map_put_from_uint64(Map *map, uint64_t key, void *val) {
//     map_put_uint64_from_uint64(map, key, (uint64_t)(uintptr_t)val);
// }

// uint64_t map_get_uint64(Map *map, void *key) {
//     return map_get_uint64_from_uint64(map, (uint64_t)(uintptr_t)key);
// }

// func map_put_uint64(Map *map, void *key, uint64_t val) {
//     map_put_uint64_from_uint64(map, (uint64_t)(uintptr_t)key, val);
// }

// func map_test() {
//     Map map = {0};
//     enum { N = 1024 };
//     for (size_t i = 1; i < N; i++) {
//         map_put(&map, (void *)i, (void *)(i+1));
//     }
//     for (size_t i = 1; i < N; i++) {
//         void *val = map_get(&map, (void *)i);
//         assert(val == (void *)(i+1));
//     }
// }

// String interning

// typedef struct Intern {
//     size_t len;
//     struct Intern *next;
//     char str[];
// } Intern;

var intern_arena: Arena;
var interns: Map;

// func str_intern_range(start: char const*, end: char const*): char const* {
//     size_t len = end - start;
//     uint64_t hash = hash_bytes(start, len);
//     uint64_t key = hash ? hash : 1;
//     Intern *intern = map_get_from_uint64(&interns, key);
//     for (Intern *it = intern; it; it = it->next) {
//         if (it->len == len && strncmp(it->str, start, len) == 0) {
//             return it->str;
//         }
//     }
//     Intern *new_intern = arena_alloc(&intern_arena, offsetof(Intern, str) + len + 1);
//     new_intern->len = len;
//     new_intern->next = intern;
//     memcpy(new_intern->str, start, len);
//     new_intern->str[len] = 0;
//     map_put_from_uint64(&interns, key, new_intern);
//     return new_intern->str;
// }

func str_intern(str: char const*): char const* {
    // return str_intern_range(str, str + strlen(str));
    return str;
}

// bool str_islower(str: char const*) {
//     while (*str) {
//         if (isalpha(*str) && !islower(*str)) {
//             return false;
//         }
//         str++;
//     }
//     return true;
// }

// Value union

// typedef union Val {
//     bool b;
//     char c;
//     unsigned char uc;
//     signed char sc;
//     short s;
//     unsigned short us;
//     int i;
//     unsigned u;
//     long l;
//     unsigned long ul;
//     long long ll;
//     unsigned long long ull;
//     uintptr_t p;
// } Val;
