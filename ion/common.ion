func write_file(path: char const*, buf: char const*, len: usize): bool {
    // FILE *file = fopen(path, "w");
    // if (!file) {
    //     return false;
    // }
    // size_t n = fwrite(buf, len, 1, file);
    // fclose(file);
    // return n == 1;
    return false;
}

func buf_len(b: void*): usize {
    return 0;
}

// TODO: We need templates or macros to make this better generic.
// #define buf_push(b, ...) (buf_fit((b), 1 + buf_len(b)), (b)[buf__hdr(b)->len++] = (__VA_ARGS__))
func buf_push(b: void*, item: void*, size: usize) {
    //
}

struct Map {
    keys: uint64*;
    vals: uint64*;
    len: usize;
    cap: usize;
}

func map_put(map: Map*, key: void const*, val: void*) {
    // map_put_uint64_from_uint64(map, (uint64_t)(uintptr_t)key, (uint64_t)(uintptr_t)val);
}

func str_intern(str: char const*): char const* {
    // return str_intern_range(str, str + strlen(str));
    return str;
}
